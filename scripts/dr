#!/usr/bin/env python3
import os
import sys
import deromanize
import yaml
from pathlib import Path
import cProfile

PROJECT_DIR = Path(deromanize.__file__).parents[1]
CONFIG_FILE = PROJECT_DIR/'data'/'new.yml'
CUTOFF = 10
CACHE_PATH = Path('.cache')
with CONFIG_FILE.open() as config:
    key = deromanize.cached_keys(yaml.safe_load, config, CACHE_PATH)
PROFILE = key.profile
# PROFILE = yaml.safe_load(CONFIG_FILE.open())
# key = deromanize.KeyGenerator(PROFILE)

@key.processor
def decode(key, word):
    # add aleph to words that begin with vowels.
    if word[0] in PROFILE['vowels']:
        word = 'Ê¾' + word
    # remove doubled letters
    newword = ''
    for i, c in enumerate(word):
        if i == 0 or c != word[i-1]:
            newword += c
    # get ending clusters, then beginning clusters, then whatever's left in the
    # middle.
    end, remaider = key['end'].getpart(newword)
    front, remaider = key['front'].getpart(remaider)
    middle = key['mid'].getallparts(remaider).add()
    hebword = front + middle + end
    hebword.sort()
    return hebword


def main():
    for word in sys.argv[1].lower().split():
        hebword = decode(word)
        print(word + ':  ', '\u200E, '.join(str(i) for i in hebword[:CUTOFF]))


if __name__ == '__main__':
    main()
