#!/usr/bin/env python3
import os
import sys
import deromanize
import yaml
from pathlib import Path
import cProfile

PROJECT_DIR = Path(deromanize.__file__).parents[1]
CONFIG_FILE = PROJECT_DIR/'data'/'new.yml'
# CONFIG_FILE = Path('..')/'data'/'new.yml'  # for pypy compat.
CUTOFF = 10
CACHE_PATH = Path('.cache')
# use caching
with CONFIG_FILE.open() as config:
    keys = deromanize.cached_keys(yaml.safe_load, config, CACHE_PATH)
PROFILE = keys.profile
# don't use caching
# PROFILE = yaml.safe_load(CONFIG_FILE.open()) 
# keys = deromanize.KeyGenerator(PROFILE)

@keys.processor
def decode(keys, word):
    # add aleph to words that begin with vowels.
    if word[0] in PROFILE['vowels']:
        word = 'Ê¾' + word
    # remove doubled letters
    newword = ''
    for i, c in enumerate(word):
        if i == 0 or c != word[i-1]:
            newword += c
    # get ending clusters, then beginning clusters, then whatever's left in the
    # middle.
    end, remainder = keys['end'].getpart(word)
    if remainder:
        try:
            front, remainder = keys['front'].getpart(remainder)
        except KeyError:
            return no_end(keys, word)
    else:
        return no_end(keys, word)

    if remainder:
        middle = keys['mid'].getallparts(remainder).add()
        return (front + middle + end)
    else:
        return (front + end)


def no_end(keys, word):
    # this is where words go when getting the ending first produces strange results
    front, remainder = keys['front'].getpart(word)
    if remainder:
        end, remainder = keys['end'].getpart(remainder)
        if remainder:
            middle = keys['mid'].getallparts(remainder).add()
            return (front + middle + end)
        else:
            return (front + end)
    else:
        return (front)


def main():
    for word in sys.argv[1].lower().split():
        hebword = decode(word)
        print(word + ':  ', '\u200E, '.join(str(i) for i in hebword[:CUTOFF]))
        for i in hebword:
            print(i.keyvalue)


if __name__ == '__main__':
    main()
